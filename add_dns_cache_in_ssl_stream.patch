diff --git a/allwinner/liballwinner/LIBRARY/DEMUX/STREAM/ssl/CdxSSLStream.c b/allwinner/liballwinner/LIBRARY/DEMUX/STREAM/ssl/CdxSSLStream.c
index 032ebd8..3a510b5 100755
--- a/allwinner/liballwinner/LIBRARY/DEMUX/STREAM/ssl/CdxSSLStream.c
+++ b/allwinner/liballwinner/LIBRARY/DEMUX/STREAM/ssl/CdxSSLStream.c
@@ -13,7 +13,6 @@
 
 #include <stdlib.h>
 #include <unistd.h>
-#include <CdxSSLStream.h>
 #include <CdxTypes.h>
 #include <errno.h>
 #include <netinet/in.h>
@@ -21,6 +20,43 @@
 #include <CdxSocketUtil.h>
 #include <netdb.h>
 
+#include <CdxStream.h>
+#include <CdxAtomic.h>
+#include <openssl/ssl.h>
+#include <openssl/err.h>
+
+#include <SmartDnsService.h>
+
+#define SOCKRECVBUF_LEN 512*1024// 262142 (5*1024*1024)
+#define closesocket close
+
+typedef struct CdxSSLStreamImpl
+{
+    CdxStreamT base;
+    cdx_int32 ioState;
+    cdx_int32 sockRecvBufLen;
+    cdx_int32 notBlockFlag;
+    cdx_int32 exitFlag;                  //when close, exit
+    cdx_int32 forceStopFlag;
+    cdx_int32 sockFd;                    //socket fd
+    //int eof;                           //all stream data is read from network
+    cdx_int32 port;
+    cdx_char *hostname;
+    cdx_atomic_t ref;                    //reference count, for free resource while still blocking.
+    cdx_atomic_t state;
+    pthread_mutex_t stateLock;
+    pthread_cond_t  stateCond;
+
+    SSL *ssl;
+    SSL_CTX *ctx;
+
+    pthread_cond_t dnsCond;
+    pthread_mutex_t dnsMutex;
+    int dnsRet;
+    struct addrinfo *dnsAI;
+
+    //add more
+}CdxSSLStreamImplT;
 static cdx_void CdxSSLStreamDecRef(CdxStreamT *stream);
 
 typedef struct CdxHttpSendBuffer
@@ -77,8 +113,9 @@ cdx_int32  CdxSSLConnect(cdx_int32 sockfd, SSL *ssl,
                 CDX_LOGE("<%s,%d>force stop.", __FUNCTION__, __LINE__);
                 return -2;
             }
-
+			CDX_LOGD("llh>>>SSL_connect begin");
             ret = SSL_connect(ssl);
+			CDX_LOGD("llh>>>SSL_connect finish");
             if (ret > 0)
             {
                 //success
@@ -540,7 +577,6 @@ __exit0:
         CdxAtomicSet(&impl->state, SSL_STREAM_IDLE);
         CdxSSLStreamDecRef(stream);
         pthread_mutex_unlock(&impl->stateLock);
-        pthread_cond_signal(&impl->stateCond);
 
         return ret;
     }
@@ -587,7 +623,6 @@ __exit1:
     CdxAtomicSet(&impl->state, SSL_STREAM_IDLE);
     CdxSSLStreamDecRef(stream);
     pthread_mutex_unlock(&impl->stateLock);
-    pthread_cond_signal(&impl->stateCond);
 
     return recvSize;
 }
@@ -639,7 +674,6 @@ static cdx_int32 __CdxSSLStreamWrite(CdxStreamT *stream, void *buf, cdx_uint32 l
     CdxAtomicSet(&impl->state, SSL_STREAM_IDLE);
     CdxSSLStreamDecRef(stream);
     pthread_mutex_unlock(&impl->stateLock);
-    pthread_cond_signal(&impl->stateCond);
 
     return (size == len) ? 0 : -1;
 
@@ -654,11 +688,11 @@ static cdx_int32 CdxSSLStreamForceStop(CdxStreamT *stream)
 
     CDX_LOGV("begin SSL force stop");
     pthread_mutex_lock(&impl->stateLock);
-    if((ref = CdxAtomicRead(&impl->state)) == SSL_STREAM_FORCESTOPPED)
-    {
-        pthread_mutex_unlock(&impl->stateLock);
-        return 0;
-    }
+    //if((ref = CdxAtomicRead(&impl->state)) == SSL_STREAM_FORCESTOPPED)
+    //{
+    //    pthread_mutex_unlock(&impl->stateLock);
+    //    return 0;
+    //}
     CdxAtomicInc(&impl->ref);
     impl->forceStopFlag = 1;
     pthread_mutex_unlock(&impl->stateLock);
@@ -669,7 +703,7 @@ static cdx_int32 CdxSSLStreamForceStop(CdxStreamT *stream)
         usleep(10*1000);
     }
     pthread_mutex_lock(&impl->stateLock);
-    CdxAtomicSet(&impl->state, SSL_STREAM_FORCESTOPPED);
+    //CdxAtomicSet(&impl->state, SSL_STREAM_FORCESTOPPED);
     pthread_mutex_unlock(&impl->stateLock);
     CdxSSLStreamDecRef(stream);
     CDX_LOGV("finish SSL force stop");
@@ -768,52 +802,88 @@ static cdx_void CdxSSLStreamDecRef(CdxStreamT *stream)
     return ;
 }
 
-static void *StartSSLStreamThread(void *pArg)
+static void DnsResponeHook(void *userhdr, int ret, struct addrinfo *ai)
+{
+    CdxSSLStreamImplT *impl = (CdxSSLStreamImplT *)userhdr;
+
+    if (ret == SDS_OK)
+    {
+        impl->dnsAI = ai;
+		CDX_LOGD("%x%x%x", ai->ai_addr->sa_data[0], ai->ai_addr->sa_data[1], ai->ai_addr->sa_data[2]);
+    }
+    
+    impl->dnsRet = ret;
+    pthread_mutex_lock(&impl->dnsMutex);
+    pthread_cond_signal(&impl->dnsCond);
+    pthread_mutex_unlock(&impl->dnsMutex);
+
+    return ;
+}
+
+static int StartSSLStreamConnect(CdxSSLStreamImplT *pArg)
 {
     CdxSSLStreamImplT *impl;
     //struct sockaddr_in addr;
     cdx_int32 ret;
     int64_t start, end;
-    struct addrinfo *res, hints, *retAddr;
-    cdx_char tempPort[10] = {0};
-    //cdx_char ipbuf[100];
-    //struct sockaddr_in *addrIn;
+    struct addrinfo *ai = NULL;
 
-    pthread_detach(pthread_self());
 
     start = GetNowUs();
 
-    impl = (CdxSSLStreamImplT *)pArg;
+    impl = pArg;
     CDX_FORCE_CHECK(impl);
 
-    CdxAtomicInc(&impl->ref);
+    impl->dnsRet = SDSRequest(impl->hostname, impl->port, &ai, impl, DnsResponeHook);
 
-    hints.ai_family = AF_INET;
-    hints.ai_socktype = SOCK_STREAM;
-    //hints.ai_flags = AI_CANONNAME; //canonical name
+    if (impl->dnsRet == SDS_OK)
+    {
 
-    sprintf(tempPort, "%d", impl->port);
-    memset(&hints, 0, sizeof(struct addrinfo));
+        CDX_FORCE_CHECK(ai);
+    }
+    else if (impl->dnsRet == SDS_PENDING)
+    {
+        while (1)
+        {
+            struct timespec abstime;
+                    
+            abstime.tv_sec = time(0);
+            abstime.tv_nsec = 100000000L;
+            
+            pthread_mutex_lock(&impl->dnsMutex);
+            pthread_cond_timedwait(&impl->dnsCond, &impl->dnsMutex, &abstime); /* wait 100 ms */
+            pthread_mutex_unlock(&impl->dnsMutex);
+
+            if (impl->forceStopFlag)
+            {
+                ai = NULL;
+                break;
+            }
+            
+            if (impl->dnsRet == SDS_OK)
+            {
+                ai = impl->dnsAI;
+                break;
+            }
+            else if (impl->dnsRet != SDS_PENDING)
+            {
+                ai = NULL;
+                break;
+            }
+            
+        }
+    
+     }
 
-    ret = getaddrinfo(impl->hostname, tempPort, &hints, &retAddr);
-    if(ret != 0)
+    if (ai == NULL)
     {
-        CDX_LOGE("get host failed, host:%s, port:%s, err:%s",
-            impl->hostname, tempPort, gai_strerror(ret));
         goto err_out;
     }
+ 
+     do
+     {
+        ret = CdxSockAsynConnect(impl->sockFd, ai->ai_addr, ai->ai_addrlen, 0, &impl->forceStopFlag);
 
-    //for (cur = retAddr; cur != NULL; cur = cur->ai_next)//print ip for test.
-    //{
-    //    addrIn = (struct sockaddr_in *)cur->ai_addr;
-    //    CDX_LOGV("xxx ip:  %s\n", inet_ntop(AF_INET, &addrIn->sin_addr, ipbuf, 100));
-    //}
-
-    res = retAddr;
-    do
-    {
-        ret = CdxSockAsynConnect(impl->sockFd, res->ai_addr,
-            res->ai_addrlen, 0, &impl->forceStopFlag);
         if(ret == 0)
         {
             break;
@@ -821,21 +891,17 @@ static void *StartSSLStreamThread(void *pArg)
         else if(ret < 0)
         {
             CDX_LOGE("connect failed. error(%d): %s.", errno, strerror(errno));
-            freeaddrinfo(retAddr);
             goto err_out;
         }
 
         if(impl->forceStopFlag == 1)
         {
             CDX_LOGV("force stop connect.");
-            freeaddrinfo(retAddr);
             goto err_out;
         }
-    }while((res = res->ai_next) != NULL);
-
-    freeaddrinfo(retAddr);
+    } while ((ai = ai->ai_next) != NULL);
 
-    if(res == NULL)
+    if (ai == NULL)
     {
         CDX_LOGE("connect failed.");
         goto err_out;
@@ -878,27 +944,13 @@ static void *StartSSLStreamThread(void *pArg)
         CDX_LOGE("ssl connect failed.");
         goto err_out;
     }
-  //  CdxSockSetBlocking(impl->sockFd, 0);//
-    pthread_mutex_lock(&impl->stateLock);
-    impl->ioState = CDX_IO_STATE_OK;
-    CdxAtomicSet(&impl->state, SSL_STREAM_IDLE);
-      pthread_cond_signal(&impl->stateCond);
-    pthread_mutex_unlock(&impl->stateLock);
-    CdxSSLStreamDecRef(&impl->base);
-    return NULL;
+    return 0;
 
 err_out:
     end = GetNowUs();
     //CDX_LOGV("Start tcp time(%lld)", end-start);
-    SSL_FREE(impl);
-    ERR_free_strings();
-    pthread_mutex_lock(&impl->stateLock);
-    impl->ioState = CDX_IO_STATE_ERROR;
-    CdxAtomicSet(&impl->state, SSL_STREAM_IDLE);
-    pthread_cond_signal(&impl->stateCond);
-    pthread_mutex_unlock(&impl->stateLock);
-    CdxSSLStreamDecRef(&impl->base);
-    return NULL;
+
+    return -1;
 }
 
 static cdx_int32 __CdxSSLStreamConnect(CdxStreamT *stream)
@@ -919,29 +971,25 @@ static cdx_int32 __CdxSSLStreamConnect(CdxStreamT *stream)
     CdxAtomicInc(&impl->ref);
     pthread_mutex_unlock(&impl->stateLock);
 
-    result = pthread_create(&impl->threadId, NULL, StartSSLStreamThread, (void *)impl);
-    if (result || !impl->threadId)
+    result = StartSSLStreamConnect(impl);
+    if (result < 0)
     {
-        CDX_LOGE("create thread error!");
+        CDX_LOGE("StartTcpStreamConnect failed!");
+        pthread_mutex_lock(&impl->stateLock);
         impl->ioState = CDX_IO_STATE_ERROR;
-        goto __exit;
+        pthread_mutex_unlock(&impl->stateLock);
     }
-
-    pthread_mutex_lock(&impl->stateLock);
-    while(impl->ioState != CDX_IO_STATE_OK
-        && impl->ioState != CDX_IO_STATE_EOS
-        && impl->ioState != CDX_IO_STATE_ERROR)
+    else
     {
-        pthread_cond_wait(&impl->stateCond, &impl->stateLock);
+        pthread_mutex_lock(&impl->stateLock);
+        impl->ioState = CDX_IO_STATE_OK;
+        pthread_mutex_unlock(&impl->stateLock);
     }
-    pthread_mutex_unlock(&impl->stateLock);
 
-__exit:
     pthread_mutex_lock(&impl->stateLock);
     CdxAtomicSet(&impl->state, SSL_STREAM_IDLE);
     CdxSSLStreamDecRef(&impl->base);
     pthread_mutex_unlock(&impl->stateLock);
-    pthread_cond_signal(&impl->stateCond);
     return (impl->ioState == CDX_IO_STATE_ERROR) ? -1 : 0;
 
 }
@@ -988,6 +1036,10 @@ static CdxStreamT *__CdxSSLStreamCreate(CdxDataSourceT *source)
     CdxAtomicSet(&impl->ref, 1);
     pthread_mutex_init(&impl->stateLock, NULL);
 
+    pthread_mutex_init(&impl->dnsMutex, NULL);
+    pthread_cond_init(&impl->dnsCond, NULL);
+    impl->dnsRet = -1;
+
     return &impl->base;
 
 err_out:
